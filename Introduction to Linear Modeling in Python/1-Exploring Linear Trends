'''
Inspect the predefined data arrays, times and distances, and the preloaded plot.
Based on your rough inspection, estimate the distance_traveled away from the starting position as of elapse_time = 2.5 hours.
Assign your answer to distance_traveled.
'''
# Compute the total change in distance and change in time
total_distance = distances[-1] - distances[0]
total_time = times[-1] - times[0]

# Estimate the slope of the data from the ratio of the changes
average_speed = total_distance / total_time

# Predict the distance traveled for a time not measured
elapse_time = 2.5
distance_traveled = average_speed * elapse_time
print("The distance traveled is {}".format(distance_traveled))

'''
Use distance = model(time) to extrapolate beyond the measured data to time=8 hours.
Print the distance predicted and then check whether it is less than or equal to 400.
If your car can travel, at most, 400 miles on a full tank, and it takes 8 hours to drive home, will you make it without refilling? You should have answer=True if you'll make it, or answer=False if you will run out of gas.
'''
# Select a time not measured.
time = 8

# Use the model to compute a predicted distance for that time.
distance = model(time)

# Inspect the value of the predicted distance traveled.
print(distance)

# Determine if you will make it without refueling.
answer = (distance <= 400)
print(answer)

'''
Complete the function definition for efficiency_model(miles, gallons).
Use the function to compute the efficiency of the provided cars (dicts car1, car2).
Store your answers as car1['mpg'] and car2['mpg'].
Complete the following logic statement to print which car (if either) has the best efficiency.
'''
# Complete the function to model the efficiency.
def efficiency_model(miles, gallons):
   return np.mean( miles / gallons )

# Use the function to estimate the efficiency for each car.
car1['mpg'] = efficiency_model(car1['miles'] , car1['gallons'] )
car2['mpg'] = efficiency_model(car2['miles'] , car2['gallons'] )

# Finish the logic statement to compare the car efficiencies.
if car1['mpg'] > car2['mpg'] :
    print('car1 is the best')
elif car1['mpg'] < car2['mpg'] :
    print('car2 is the best')
else:
    print('the cars have the same efficiency')
   
  
  
'''
Use plt.subplots() to create figure and axis objects.
Data have been provided in two predefined numpy arrays, times and distances.
Use axis.plot() to plot times on the horizontal and distances on the vertical.
Use the input key word args linestyle=" ", marker="o", and color="red" when calling
'''
# Create figure and axis objects using subplots()
fig, axis = plt.subplots()

# Plot line using the axis.plot() method
line = axis.plot(times , distances , linestyle=" ", marker="o", color="red")

# Use the plt.show() method to display the figure
plt.show()

'''
Use model_distances = model(times, measured_distances) to compute the modeled values.
Use plt.subplots() to create figure and axis objects.
Use axis.plot() to plot times vs measured_distances with options linestyle=" ", marker="o", color="black".
Use axis.plot() to also plot times vs model_distances with options linestyle="-", color="red".
'''
# Pass times and measured distances into model
model_distances = model(times, measured_distances)

# Create figure and axis objects and call axis.plot() twice to plot data and model distances versus times
fig, axis = plt.subplots()
axis.plot(times, measured_distances, linestyle=" ", marker="o", color="black", label="Measured")
axis.plot(times, model_distances, linestyle="-", marker=None, color="red", label="Modeled")

# Add grid lines and a legend to your plot, and then show to display
axis.grid(True)
axis.legend(loc="best")
plt.show()

'''
Inspect the chart above, and provide preliminary estimates of trial_slope and trial_intercept. These can be adjusted later in the exercise.
Use the predefined function xm, ym = model(intercept, slope) to generate model predictions.
Use the provided function fig = plot_data_and_model(xd, yd, xm, ym) to plot the measured data (xd, yd) and the modeled predictions (xm, ym) together.
If the model does not fit the data, try different values for trial_slope and trial_intercept and rerun your code.
Repeat until you believe you have the best values, and then assign them to final_slope and final_intercept and submit your answer.
'''
# Look at the plot data and guess initial trial values
trial_slope = 1
trial_intercept = 2

# input thoses guesses into the model function to compute the model values.
xm, ym = model(trial_intercept, trial_slope)

# Compare your your model to the data with the plot function
fig = plot_data_and_model(xd, yd, xm, ym)
plt.show()

# Repeat the steps above until your slope and intercept guess makes the model line up with the data.
final_slope = trial_slope
final_intercept = trial_intercept

'''
Compute the deviations dx and dy.
Compute the normalized deviations zx and zy.
Call plot_cdfs() to see how both the raw and the normalized data compares.

'''
# Compute the deviations by subtracting the mean offset
dx = x - np.mean(x)
dy = y - np.mean(y)

# Normalize the data by dividing the deviations by the standard deviation
zx = dx / np.std(x)
zy = dy / np.std(y)

# Plot comparisons of the raw data and the normalized data
fig = plot_cdfs(dx, dy, zx, zy)

'''
Compute the deviations, dx and dy by subtracting the mean, using np.mean(), and compute covariance as the mean of their product dx*dy.
Compute the normalize deviations, zx and zy, by dividing by the standard deviation, using np.std(), and compute the correlation as the mean of their product, zx*zy.
Use plot_normalized_deviations(zx, zy) to plot the product of the normalized deviations and visually check it against the correlation value.
'''
# Compute the covariance from the deviations.
dx = x - np.mean(x)
dy = y - np.mean(y)
covariance = np.mean(dx * dy)
print("Covariance: ", covariance)

# Compute the correlation from the normalized deviations.
zx = dx / np.std(x)
zy = dy / np.std(y)
correlation = np.mean(zx * zy)
print("Correlation: ", correlation)

# Plot the normalized deviations for visual inspection. 
fig = plot_normalized_deviations(zx, zy)

'''
Complete the function definition for correlation() using the mean of the products of the normalized deviations of x and y.
Iterate over data_sets, computing and storing each correlation using correlation(record['x'], record['y']).
Run the code up until this point (i.e. the end of the for loop), and inspect the printout. Which dataset has the strongest correlation?
Assign the name of the dataset (data_sets['A'], data_sets['B'], or data_sets['C']) with the strongest correlation to the variable best_data.
'''

# Complete the function that will compute correlation.
def correlation(x,y):
    x_dev = x - np.mean(x)
    y_dev = y - np.mean(y)
    x_norm = x_dev / np.std(x)
    y_norm = y_dev / np.std(y)
    return np.mean(x_norm * y_norm)

# Compute and store the correlation for each data set in the list.
for name, data in data_sets.items():
    data['correlation'] = correlation(data['x'], data['y'])
    print('data set {} has correlation {:.2f}'.format(name, data['correlation']))

# Assign the data set with the best correlation.
best_data = data_sets['A']


